import json
import time
import random
import os
from datetime import datetime
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Ruta al archivo JSON
RUTA_JSON = "proveedores.json"

# Carpeta en el escritorio donde guardar descargas
escritorio = Path.home() / "Desktop"
CARPETA_DESCARGAS = escritorio / "descargas"
CARPETA_DESCARGAS.mkdir(parents=True, exist_ok=True)

# Fecha actual
fecha = datetime.now().strftime("%Y-%m-%d")

def eliminar_archivos_desactualizados():
    """Eliminar archivos en la carpeta de descargas cuya fecha no sea la actual"""
    print("üßπ Revisando archivos antiguos en la carpeta de descargas...")
    for archivo in CARPETA_DESCARGAS.iterdir():
        if archivo.is_file():
            nombre = archivo.name
            if fecha not in nombre:
                try:
                    archivo.unlink()
                    print(f"üóëÔ∏è Eliminado: {nombre}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error eliminando {nombre}: {e}")

def crear_driver_con_opciones():
    """Crear driver de Chrome con opciones optimizadas y minimizado"""
    chrome_options = Options()

    # Minimizado
    # chrome_options.add_argument("--window-position=32000,32000")
    # chrome_options.add_argument("--start-minimized")

    # Opciones b√°sicas
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    # Opciones para SSL/TLS
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--allow-running-insecure-content")

    # Anti-detecci√≥n
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)

    # User agent
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    # Configuraci√≥n de descargas
    chrome_options.add_experimental_option("prefs", {
        "download.default_directory": str(CARPETA_DESCARGAS),
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": False,
        "profile.default_content_setting_values.automatic_downloads": 1
    })

    return chrome_options

def determinar_nombre_archivo(href, texto, index):
    href_texto = (href or "").upper()
    texto = texto.upper()
    if "POXIPOL" in href_texto or "POXIPOL" in texto or "POXI" in texto:
        return f"Fusion_POXIPOL_{fecha}.xls"
    elif "MAZFREN" in href_texto or "MAZFREN" in texto or "MAZ" in texto:
        return f"Fusion_MAZFREN_{fecha}.xls"
    else:
        return None  # ignorar archivos que no sean POXIPOL o MAZFREN

def filtrar_botones_fusion_por_nombre(driver):
    """Buscar solo los botones de descarga de Fusion que contengan POXIPOL o MAZFREN"""
    print("üîç Buscando botones v√°lidos de Fusion (POXIPOL o MAZFREN)...")
    botones = driver.find_elements(By.CSS_SELECTOR, 'a.elementor-button')
    botones_filtrados = []

    for boton in botones:
        href = boton.get_attribute("href") or ""
        texto = boton.text.strip()
        if texto.upper() == "LISTA" and any(x in href.upper() for x in ["POXIPOL", "MAZFREN"]):

            print(f"‚úÖ Bot√≥n v√°lido encontrado - Texto: '{texto}', Href: '{href}'")
            botones_filtrados.append(boton)

    if len(botones_filtrados) < 2:
        raise Exception("‚ùå No se encontraron ambos archivos requeridos: POXIPOL y MAZFREN")

    return botones_filtrados

def descargar_archivos_fusion(driver, wait):
    """Descargar los archivos espec√≠ficos de Fusion filtrados por nombre"""
    print("üì• Iniciando descarga de archivos de Fusion...")

    archivos_iniciales = set(CARPETA_DESCARGAS.glob("*.xls")) | set(CARPETA_DESCARGAS.glob("*.xlsx"))

    botones_descarga = filtrar_botones_fusion_por_nombre(driver)
    archivos_descargados = []

    for i, boton in enumerate(botones_descarga):
        try:
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", boton)
            time.sleep(2)
            href = boton.get_attribute("href")
            texto = boton.text.strip()
            print(f"üîó Enlace: {href}\nüìù Texto: {texto}")

            archivos_antes = set(CARPETA_DESCARGAS.glob("*.xls")) | set(CARPETA_DESCARGAS.glob("*.xlsx"))
            driver.execute_script("arguments[0].click();", boton)
            print(f"‚úÖ Clic realizado en bot√≥n {i+1}")

            for _ in range(60):
                time.sleep(2)
                actuales = set(CARPETA_DESCARGAS.glob("*.xls")) | set(CARPETA_DESCARGAS.glob("*.xlsx"))
                nuevos = actuales - archivos_antes
                if nuevos:
                    archivo = max(nuevos, key=lambda x: x.stat().st_ctime)
                    nombre_destino = determinar_nombre_archivo(href, texto, i)
                    if nombre_destino:
                        destino = CARPETA_DESCARGAS / nombre_destino
                        archivo.rename(destino)
                        archivos_descargados.append(destino.name)
                        print(f"‚úÖ Archivo {i+1} descargado: {destino.name}")
                    break
        except Exception as e:
            print(f"‚ùå Error en descarga {i+1}: {e}")

    if not any("POXIPOL" in a.upper() for a in archivos_descargados):
        raise Exception("‚ùå No se descarg√≥ el archivo de POXIPOL")
    if not any("MAZFREN" in a.upper() for a in archivos_descargados):
        raise Exception("‚ùå No se descarg√≥ el archivo de MAZFREN")

    return archivos_descargados

# Ejecutar limpieza antes de iniciar
eliminar_archivos_desactualizados()

def obtener_archivos_actuales():
    """Obtener lista actual de archivos Excel en la carpeta de descargas"""
    return set(CARPETA_DESCARGAS.glob("*.xlsx")) | set(CARPETA_DESCARGAS.glob("*.xls"))

def obtener_todos_archivos_actuales():
    """Obtener lista actual de TODOS los archivos en la carpeta de descargas"""
    return set(CARPETA_DESCARGAS.glob("*"))

def cerrar_anuncio_fusion(driver, wait):
    """Cerrar el anuncio espec√≠fico de Fusion en la p√°gina de productos"""
    print("üîç Buscando y cerrando anuncio de Fusion en p√°gina de productos...")
    
    # Esperar un momento para que el anuncio aparezca
    time.sleep(3)
    
    # Selectores para el bot√≥n de cerrar anuncio (m√°s amplios)
    selectores_cerrar = [
        # Selector espec√≠fico proporcionado
        'a.dialog-close-button.dialog-lightbox-close-button[role="button"][aria-label="Close"]',
        # Variaciones del selector
        'a.dialog-close-button.dialog-lightbox-close-button',
        'a.dialog-close-button[aria-label="Close"]',
        'a.dialog-lightbox-close-button[aria-label="Close"]',
        # Por clase y rol
        'a[role="button"].dialog-close-button',
        'a[role="button"].dialog-lightbox-close-button',
        # Por aria-label solamente
        'a[aria-label="Close"]',
        '[aria-label="Close"]',
        'button[aria-label="Close"]',
        # Por icono dentro del bot√≥n/enlace
        'a:has(i.eicon-close)',
        'a.dialog-close-button:has(i.eicon-close)',
        'button:has(i.eicon-close)',
        # Fallbacks generales para elementos de cierre
        '.dialog-close-button',
        '.dialog-lightbox-close-button',
        'i.eicon-close',
        '.eicon-close',
        # Selectores para modales de Elementor
        '.elementor-lightbox-close-container',
        '.elementor-lightbox-close',
        '.dialog-widget-close-button',
        # Selectores gen√©ricos de cierre
        '.close-button',
        '.modal-close',
        '.popup-close',
        '[data-dismiss="modal"]',
        # XPath para texto "Close" o "Cerrar"
        "//a[contains(text(), 'Close')]",
        "//button[contains(text(), 'Close')]",
        "//a[contains(text(), 'Cerrar')]",
        "//button[contains(text(), 'Cerrar')]",
        "//a[contains(text(), '√ó')]",
        "//button[contains(text(), '√ó')]"
    ]
    
    boton_cerrar = None
    for selector in selectores_cerrar:
        try:
            print(f"üîç Probando selector: {selector}")
            
            if selector.startswith("//"):
                # Para selectores XPath
                elementos = driver.find_elements(By.XPATH, selector)
            elif selector == 'i.eicon-close' or selector == '.eicon-close':
                # Si es el icono, buscar el enlace/bot√≥n padre
                iconos = driver.find_elements(By.CSS_SELECTOR, selector)
                elementos = []
                for icono in iconos:
                    if icono.is_displayed():
                        # Buscar el elemento padre clickeable
                        try:
                            padre_a = icono.find_element(By.XPATH, "./ancestor::a[1]")
                            if padre_a.is_displayed():
                                elementos.append(padre_a)
                        except:
                            pass
                        try:
                            padre_button = icono.find_element(By.XPATH, "./ancestor::button[1]")
                            if padre_button.is_displayed():
                                elementos.append(padre_button)
                        except:
                            pass
            else:
                # Para otros selectores CSS
                elementos = driver.find_elements(By.CSS_SELECTOR, selector)
            
            for elemento in elementos:
                if elemento.is_displayed():
                    texto = elemento.text.strip()
                    tag_name = elemento.tag_name
                    clases = elemento.get_attribute("class") or ""
                    aria_label = elemento.get_attribute("aria-label") or ""
                    
                    print(f"‚úÖ Elemento encontrado - Tag: {tag_name}, Texto: '{texto}', Clases: '{clases}', Aria-label: '{aria_label}'")
                    
                    # Verificar que sea un elemento de cierre v√°lido
                    if any(palabra in clases.lower() for palabra in ['close', 'cerrar']) or \
                       any(palabra in aria_label.lower() for palabra in ['close', 'cerrar']) or \
                       any(palabra in texto.lower() for palabra in ['close', 'cerrar', '√ó']):
                        boton_cerrar = elemento
                        print(f"‚úÖ Bot√≥n de cerrar identificado con selector: {selector}")
                        break
            
            if boton_cerrar:
                break
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
            continue
    
    if boton_cerrar:
        try:
            print("üéØ Intentando cerrar anuncio...")
            
            # Hacer scroll al bot√≥n
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", boton_cerrar)
            time.sleep(2)
            
            # Intentar diferentes m√©todos de clic
            metodos_clic = [
                ("Clic normal", lambda: boton_cerrar.click()),
                ("Clic con JavaScript", lambda: driver.execute_script("arguments[0].click();", boton_cerrar)),
                ("Clic con offset", lambda: driver.execute_script("arguments[0].dispatchEvent(new MouseEvent('click', {bubbles: true}));", boton_cerrar)),
                ("Forzar clic", lambda: driver.execute_script("arguments[0].click(); arguments[0].style.display='none';", boton_cerrar))
            ]
            
            for nombre_metodo, metodo_clic in metodos_clic:
                try:
                    print(f"üñ±Ô∏è Intentando {nombre_metodo}...")
                    metodo_clic()
                    time.sleep(2)
                    
                    # Verificar si el anuncio se cerr√≥
                    try:
                        # Si el elemento ya no est√° visible, el anuncio se cerr√≥
                        if not boton_cerrar.is_displayed():
                            print(f"‚úÖ Anuncio cerrado exitosamente con {nombre_metodo}")
                            return True
                    except:
                        # Si hay excepci√≥n al verificar, probablemente se cerr√≥
                        print(f"‚úÖ Anuncio cerrado exitosamente con {nombre_metodo}")
                        return True
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è {nombre_metodo} fall√≥: {e}")
                    continue
            
            print("‚ö†Ô∏è No se pudo cerrar el anuncio con ning√∫n m√©todo")
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error general al cerrar anuncio: {e}")
            return False
    else:
        print("‚ö†Ô∏è No se encontr√≥ el bot√≥n para cerrar el anuncio")
        
        # Intentar cerrar con tecla Escape como √∫ltimo recurso
        try:
            print("‚å®Ô∏è Intentando cerrar con tecla Escape...")
            driver.find_element(By.TAG_NAME, "body").send_keys("\ue00c")  # Escape key
            time.sleep(2)
            print("‚úÖ Tecla Escape enviada")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo enviar tecla Escape: {e}")
            return False

def manejar_pagina_productos_fusion(driver, wait):
    """Manejar la p√°gina de productos de Fusion despu√©s del login"""
    print("üîß Manejando p√°gina de productos de Fusion...")
    
    # Verificar si estamos en la p√°gina de productos con login=true
    url_actual = driver.current_url
    print(f"üìç URL actual: {url_actual}")
    
    if "productos" in url_actual and "login=true" in url_actual:
        print("‚úÖ Detectada p√°gina de productos con login exitoso")
        
        # Intentar cerrar el anuncio
        anuncio_cerrado = cerrar_anuncio_fusion(driver, wait)
        
        if anuncio_cerrado:
            print("‚úÖ Anuncio cerrado, continuando...")
        else:
            print("‚ö†Ô∏è No se pudo cerrar el anuncio, intentando continuar...")
        
        # Esperar un momento despu√©s de intentar cerrar el anuncio
        time.sleep(3)
        
        return True
    else:
        print("‚ÑπÔ∏è No se detect√≥ la p√°gina de productos con anuncio")
        return False

def buscar_botones_descarga_fusion(driver):
    """Buscar los botones de descarga espec√≠ficos de Fusion"""
    print("üîç Buscando botones de descarga de Fusion...")
    
    # URLs espec√≠ficas de los archivos a descargar
    urls_esperadas = [
        "https://www.distribuidorafusion.com.ar/wp-content/uploads/2024/07/POXIPOL-CLIENTES-2025-01-30-2.xls",
        "https://www.distribuidorafusion.com.ar/wp-content/uploads/2024/07/MAZFREN-CLIENTES-2025-04-15.xls"
    ]
    
    botones_encontrados = []
    
    # Buscar enlaces con las URLs espec√≠ficas
    for url in urls_esperadas:
        try:
            # Buscar por href exacto
            enlace = driver.find_element(By.CSS_SELECTOR, f'a[href="{url}"]')
            if enlace.is_displayed():
                botones_encontrados.append(enlace)
                print(f"‚úÖ Enlace encontrado para: {url}")
        except:
            print(f"‚ö†Ô∏è No se encontr√≥ enlace directo para: {url}")
    
    # Si no encontramos por URL exacta, buscar por patrones
    if len(botones_encontrados) < 2:
        print("üîç Buscando por patrones alternativos...")
        
        selectores_alternativos = [
            # Selectores espec√≠ficos para los botones de Fusion
            'a.elementor-button.elementor-button-link.elementor-size-sm[download]',
            'a.elementor-button.elementor-button-link.elementor-size-sm',
            'a.elementor-button[download]',
            'a.elementor-button-link[download]',
            # Por texto del bot√≥n
            '//a[.//span[contains(text(), "LISTA")]]',
            '//a[contains(@class, "elementor-button") and .//span[contains(text(), "LISTA")]]',
            # Por href que contenga los nombres de archivo
            'a[href*="POXIPOL-CLIENTES"]',
            'a[href*="MAZFREN-CLIENTES"]',
            'a[href*=".xls"]',
            # Fallbacks generales
            'a.elementor-button',
            'a[download*=".xls"]'
        ]
        
        for selector in selectores_alternativos:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed():
                        href = elemento.get_attribute("href") or ""
                        download_attr = elemento.get_attribute("download") or ""
                        texto = elemento.text.strip()
                        
                        # Verificar que sea un enlace de descarga v√°lido
                        if (".xls" in href.lower() and 
                            ("POXIPOL" in href or "MAZFREN" in href or "CLIENTES" in href)) or \
                           ("LISTA" in texto and "elementor-button" in elemento.get_attribute("class")):
                            
                            # Evitar duplicados
                            if elemento not in botones_encontrados:
                                botones_encontrados.append(elemento)
                                print(f"‚úÖ Bot√≥n encontrado - Texto: '{texto}', Href: '{href}'")
                                
                                # Si ya tenemos 2 botones, parar
                                if len(botones_encontrados) >= 2:
                                    break
                
                if len(botones_encontrados) >= 2:
                    break
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
    
    print(f"üìä Total de botones encontrados: {len(botones_encontrados)}")
    return botones_encontrados

def descargar_archivos_fusion(driver, wait):
    """Descargar los archivos espec√≠ficos de Fusion"""
    print("üì• Iniciando descarga de archivos de Fusion...")
    
    # Obtener archivos antes de las descargas
    archivos_iniciales = obtener_archivos_actuales()
    
    # Buscar botones de descarga
    botones_descarga = filtrar_botones_fusion_por_nombre(driver)
    
    if not botones_descarga:
        raise Exception("No se encontraron botones de descarga para Fusion")
    
    archivos_descargados = []
    
    for i, boton in enumerate(botones_descarga):
        try:
            print(f"\nüì• Descargando archivo {i+1}/{len(botones_descarga)}...")
            
            # Hacer scroll al bot√≥n
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", boton)
            time.sleep(2)
            
            # Obtener informaci√≥n del enlace
            href = boton.get_attribute("href") or ""
            texto = boton.text.strip()
            print(f"üîó Enlace: {href}")
            print(f"üìù Texto: {texto}")
            
            # Obtener archivos antes de este clic
            archivos_antes_clic = obtener_archivos_actuales()
            
            # Hacer clic en el bot√≥n
            driver.execute_script("arguments[0].click();", boton)
            print(f"‚úÖ Clic realizado en bot√≥n {i+1}")
            
            # Esperar descarga (2 minutos por archivo)
            archivo_descargado = esperar_nueva_descarga(archivos_antes_clic, timeout_minutos=2)
            
            if archivo_descargado:
                # Determinar nombre basado en el contenido del enlace
                if "POXIPOL" in href:
                    nombre_archivo = f"Fusion_POXIPOL_{fecha}.xls"
                elif "MAZFREN" in href:
                    nombre_archivo = f"Fusion_MAZFREN_{fecha}.xls"
                else:
                    nombre_archivo = f"Fusion_archivo_{i+1}_{fecha}.xls"
                
                # Renombrar archivo
                nuevo_nombre = CARPETA_DESCARGAS / nombre_archivo
                contador = 1
                while nuevo_nombre.exists():
                    base_name = nombre_archivo.replace('.xls', f'_{contador}.xls')
                    nuevo_nombre = CARPETA_DESCARGAS / base_name
                    contador += 1
                
                archivo_descargado.rename(nuevo_nombre)
                archivos_descargados.append(nuevo_nombre.name)
                print(f"‚úÖ Archivo {i+1} descargado: {nuevo_nombre.name}")
            else:
                print(f"‚ö†Ô∏è No se descarg√≥ el archivo {i+1}")
            
            # Pausa entre descargas
            if i < len(botones_descarga) - 1:
                time.sleep(5)
                
        except Exception as e:
            print(f"‚ùå Error descargando archivo {i+1}: {e}")
            continue
    
    return archivos_descargados

def hacer_login_fusion(driver, proveedor, wait):
    """Manejar el login espec√≠fico para Fusion"""
    print("üîß Procesando login espec√≠fico para Fusion...")
    
    try:
        # Buscar campos de login (usar l√≥gica similar a otros proveedores)
        print("üîç Buscando campos de login...")
        
        # Intentar m√∫ltiples selectores para el campo de usuario
        selectores_usuario = [
            'input[name="log"]',
            'input[name="username"]',
            'input[name="user"]',
            'input[type="text"]',
            'input[placeholder*="usuario"]',
            'input[placeholder*="Usuario"]',
            'input[placeholder*="email"]',
            'input[placeholder*="Email"]'
        ]
        
        usuario_field = None
        for selector in selectores_usuario:
            try:
                usuario_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de usuario encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not usuario_field:
            raise Exception("No se pudo encontrar el campo de usuario")
        
        # Buscar campo de contrase√±a
        selectores_password = [
            'input[name="pwd"]',
            'input[name="password"]',
            'input[type="password"]',
            'input[placeholder*="contrase√±a"]',
            'input[placeholder*="Contrase√±a"]'
        ]
        
        password_field = None
        for selector in selectores_password:
            try:
                password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de contrase√±a encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not password_field:
            raise Exception("No se pudo encontrar el campo de contrase√±a")
        
        # Llenar los campos
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de usuario
        try:
            usuario_field.clear()
            time.sleep(1)
            usuario_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Usuario ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar usuario: {e}")
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", usuario_field)
            print("‚úÖ Usuario ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # Buscar bot√≥n de submit
        print("üîç Buscando bot√≥n de submit...")
        
        selectores_submit = [
            "button[type='submit']",
            "input[type='submit']",
            "//button[contains(text(), 'Ingresar')]",
            "//button[contains(text(), 'Login')]",
            "//button[contains(text(), 'Entrar')]",
            "//input[contains(@value, 'Ingresar')]",
            "//input[contains(@value, 'Login')]",
            ".wp-element-button",
            ".elementor-button",
            ".btn-primary",
            "button"
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    print(f"‚úÖ Bot√≥n de submit encontrado con selector: {selector}")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if submit_button:
            print("üöÄ Haciendo clic en bot√≥n de submit...")
            try:
                submit_button.click()
                print("‚úÖ Clic normal exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", submit_button)
                print("‚úÖ Clic con JavaScript exitoso")
        else:
            print("‚å®Ô∏è No se encontr√≥ bot√≥n, enviando formulario con Enter...")
            password_field.send_keys("\n")
        
        time.sleep(5)
        print("‚úÖ Login de Fusion completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Fusion: {e}")

def buscar_primer_boton_excel(driver, proveedor_nombre=""):
    """Buscar el primer bot√≥n de Excel v√°lido - adaptado para diferentes proveedores"""
    print("üîç Buscando bot√≥n de Excel...")
    
    # Para Fusion, manejar el anuncio y luego buscar botones de descarga
    if proveedor_nombre.lower() == 'fusion':
        print("üîß Procesamiento especial para Fusion...")
        
        # Esperar un momento para que cargue la p√°gina
        time.sleep(5)
        
        # Para Fusion, retornamos None porque usaremos la funci√≥n espec√≠fica de descarga
        return None
    
    # Para Expoyer, usar la funci√≥n espec√≠fica de descarga
    elif proveedor_nombre.lower() == 'expoyer':
        print("üîß Procesamiento especial para Expoyer...")
        
        # Para Expoyer, retornamos None porque usaremos la funci√≥n espec√≠fica de descarga
        return None
    
    # Para Autocor, buscar pesta√±a y bot√≥n espec√≠ficos de Vuetify
    elif proveedor_nombre.lower() == 'autocor':
        print("üîç Buscando pesta√±a y bot√≥n de descarga espec√≠ficos para Autocor...")

        # PASO 1: Buscar y hacer clic en la pesta√±a "Lista de precios"
        print("üîç Paso 1: Buscando pesta√±a 'Lista de precios'...")
        time.sleep(2)
        selectores_tab = [
            "//div[contains(@class, 'v-tab') and contains(text(), 'Lista de precios')]",
            "//div[@role='tab' and contains(text(), 'Lista de precios')]",
            "//div[contains(@class, 'v-tab')]//i[contains(@class, 'mdi-download')]/parent::div[contains(text(), 'Lista de precios')]",
            "//div[contains(@class, 'v-tab') and contains(text(), 'Lista')]",
            "//div[contains(@class, 'v-tab') and contains(text(), 'precios')]",
            "div.v-tab:has(i.mdi-download)",
            "//div[contains(@class, 'v-tab')]//i[contains(@class, 'mdi-download')]/parent::div"
        ]

        tab_encontrada = None
        for selector in selectores_tab:
            try:
                if selector.startswith("//"):
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)

                for elemento in elementos:
                    if elemento.is_displayed():
                        texto = elemento.text.strip()
                        clases = elemento.get_attribute("class") or ""
                        role = elemento.get_attribute("role") or ""

                        print(f"üîç Pesta√±a encontrada - Texto: '{texto}', Clases: '{clases}', Role: '{role}'")

                        if "Lista de precios" in texto or ("Lista" in texto and "precios" in texto):
                            print(f"‚úÖ Pesta√±a 'Lista de precios' encontrada: '{texto}'")
                            tab_encontrada = elemento
                            break
                        elif "v-tab" in clases and any(palabra in texto.lower() for palabra in ['lista', 'precios', 'download']):
                            print(f"‚úÖ Pesta√±a relacionada encontrada: '{texto}'")
                            tab_encontrada = elemento
                            break

                if tab_encontrada:
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector de pesta√±a {selector}: {e}")
                continue

        if tab_encontrada:
            print("üñ±Ô∏è Haciendo clic en pesta√±a 'Lista de precios'...")
            try:
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", tab_encontrada)
                time.sleep(2)
                driver.execute_script("arguments[0].click();", tab_encontrada)
                print("‚úÖ Clic en pesta√±a exitoso")
                time.sleep(3)
            except Exception as e:
                print(f"‚ö†Ô∏è Error al hacer clic en pesta√±a: {e}")
        else:
            print("‚ö†Ô∏è No se encontr√≥ la pesta√±a 'Lista de precios'")

        # PASO 2: Buscar el bot√≥n de descarga
        print("üîç Paso 2: Buscando bot√≥n 'DESCARGAR LISTA ACTUAL'...")

        selectores_autocor = [
            "//button[contains(@class, 'v-btn') and .//span[contains(text(), 'DESCARGAR LISTA ACTUAL')]]",
            "//button[contains(@class, 'v-btn')]//span[contains(text(), 'DESCARGAR LISTA ACTUAL')]/parent::button",
            "//button[contains(@class, 'v-btn') and .//span[contains(text(), 'DESCARGAR')]]",
            "//button[contains(@class, 'v-btn') and .//span[contains(text(), 'LISTA')]]",
            "//button[contains(@class, 'v-btn') and .//span[contains(text(), 'ACTUAL')]]",
            "//button[contains(@class, 'v-btn') and contains(@class, 'primary') and .//span[contains(text(), 'DESCARGAR')]]",
            "button.v-btn.primary.dark-2",
            "button.v-btn.v-btn--is-elevated.primary",
            "button.v-btn.primary",
            "//button[contains(@class, 'v-btn') and (contains(text(), 'DESCARGAR') or contains(text(), 'LISTA'))]"
        ]

        boton_descarga = None
        for selector in selectores_autocor:
            try:
                if selector.startswith("//"):
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)

                for elemento in elementos:
                    if elemento.is_displayed() and elemento.is_enabled():
                        texto = elemento.text.strip()
                        clases = elemento.get_attribute("class") or ""

                        print(f"üîç Bot√≥n encontrado - Texto: '{texto}', Clases: '{clases}'")

                        if "DESCARGAR LISTA ACTUAL" in texto or \
                           ("DESCARGAR" in texto and ("LISTA" in texto or "ACTUAL" in texto)) or \
                           ("DESCARGAR" in texto and "v-btn" in clases):
                            print(f"‚úÖ Bot√≥n de descarga encontrado para Autocor: '{texto}'")
                            
                            try:
                                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", elemento)
                                time.sleep(1)
                                print("üì• Bot√≥n de descarga identificado, esperando clic desde funci√≥n principal")
                                return elemento
                                time.sleep(5)
                            except Exception as e:
                                print(f"‚ö†Ô∏è Error al hacer clic en el bot√≥n de descarga: {e}")
                            break

                if boton_descarga:
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue

    # Para Ventor, buscar enlaces de descarga espec√≠ficos
    elif proveedor_nombre.lower() == 'ventor':
        print("üîç Buscando enlace de descarga espec√≠fico para Ventor...")
        
        selectores_ventor = [
            # Enlace espec√≠fico con texto "FORMATO XLS"
            "//a[contains(text(), 'FORMATO XLS')]",
            "//a[contains(text(), 'XLS')]",
            # Enlaces que apunten a archivos Excel
            "a[href*='.xlsx']",
            "a[href*='.xls']",
            "a[download*='.xlsx']",
            "a[download*='.xls']",
            # Enlaces con atributo download
            "a[download]",
            # Enlaces que contengan "excel" o "formato"
            "//a[contains(text(), 'Excel')]",
            "//a[contains(text(), 'EXCEL')]",
            "//a[contains(text(), 'formato')]",
            "//a[contains(text(), 'FORMATO')]",
            "//a[contains(text(), 'descargar')]",
            "//a[contains(text(), 'DESCARGAR')]"
        ]
        
        for selector in selectores_ventor:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed():
                        href = elemento.get_attribute("href") or ""
                        texto = elemento.text.strip()
                        download_attr = elemento.get_attribute("download") or ""
                        
                        print(f"üîç Enlace encontrado - Texto: '{texto}', Href: '{href}', Download: '{download_attr}'")
                        
                        # Verificar que sea un enlace de Excel v√°lido
                        if any(ext in href.lower() for ext in ['.xlsx', '.xls']) or \
                           any(ext in download_attr.lower() for ext in ['.xlsx', '.xls']) or \
                           any(palabra in texto.lower() for palabra in ['xls', 'excel', 'formato']):
                            print(f"‚úÖ Enlace de descarga encontrado para Ventor: '{texto}'")
                            return elemento
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        print("‚ùå No se encontr√≥ enlace de descarga para Ventor")
        return None
    
    # Para Icepar, buscar enlaces de descarga espec√≠ficos
    elif proveedor_nombre.lower() == 'icepar':
        print("üîç Buscando enlace de descarga espec√≠fico para Icepar...")
        
        selectores_icepar = [
            # Enlace espec√≠fico con texto "descargar" y href que contenga "export/excel"
            "//a[contains(text(), 'descargar') and contains(@href, 'export/excel')]",
            "//a[contains(text(), 'DESCARGAR') and contains(@href, 'export/excel')]",
            "//a[contains(text(), 'Descargar') and contains(@href, 'export/excel')]",
            # Enlaces que contengan "export/excel"
            "a[href*='export/excel']",
            "a[href*='export']",
            # Enlaces con texto "descargar"
            "//a[contains(text(), 'descargar')]",
            "//a[contains(text(), 'DESCARGAR')]",
            "//a[contains(text(), 'Descargar')]",
            # Enlaces que contengan "excel"
            "//a[contains(text(), 'excel')]",
            "//a[contains(text(), 'Excel')]",
            "//a[contains(text(), 'EXCEL')]",
            "a[href*='excel']"
        ]
        
        for selector in selectores_icepar:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed():
                        href = elemento.get_attribute("href") or ""
                        texto = elemento.text.strip()
                        
                        print(f"üîç Enlace encontrado - Texto: '{texto}', Href: '{href}'")
                        
                        # Verificar que sea un enlace de descarga v√°lido para Icepar
                        if ('export/excel' in href.lower() and 'descargar' in texto.lower()) or \
                           ('export' in href.lower() and 'descargar' in texto.lower()) or \
                           ('excel' in href.lower() and 'descargar' in texto.lower()):
                            print(f"‚úÖ Enlace de descarga encontrado para Icepar: '{texto}'")
                            return elemento
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        print("‚ùå No se encontr√≥ enlace de descarga para Icepar")
        return None
    
    # Para Atonor, buscar enlaces de descarga espec√≠ficos
    elif proveedor_nombre.lower() == 'atonor':
        print("üîç Buscando enlace de descarga espec√≠fico para Atonor...")
        
        selectores_atonor = [
            # Enlace espec√≠fico con texto "Lista precios EXCEL" y href que contenga ".xlsx"
            "//a[contains(text(), 'Lista precios EXCEL') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'Lista precios') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'EXCEL') and contains(@href, '.xlsx')]",
            # Enlaces que apunten a archivos Excel en wp-content/uploads
            "a[href*='wp-content/uploads'][href*='.xlsx']",
            "a[href*='wp-content'][href*='.xlsx']",
            # Enlaces que contengan "LISTA" y ".xlsx"
            "//a[contains(@href, 'LISTA') and contains(@href, '.xlsx')]",
            "//a[contains(@href, 'lista') and contains(@href, '.xlsx')]",
            # Enlaces con texto que contenga "lista", "precios", "excel"
            "//a[contains(text(), 'lista') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'Lista') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'LISTA') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'precios') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'Precios') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'PRECIOS') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'excel') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'Excel') and contains(@href, '.xlsx')]",
            "//a[contains(text(), 'EXCEL') and contains(@href, '.xlsx')]",
            # Fallback: cualquier enlace que apunte a .xlsx
            "a[href*='.xlsx']",
            "a[href*='.xls']"
        ]
        
        for selector in selectores_atonor:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed():
                        href = elemento.get_attribute("href") or ""
                        texto = elemento.text.strip()
                        
                        print(f"üîç Enlace encontrado - Texto: '{texto}', Href: '{href}'")
                        
                        # Verificar que sea un enlace de descarga v√°lido para Atonor
                        if ('.xlsx' in href.lower() or '.xls' in href.lower()) and \
                           (any(palabra in texto.lower() for palabra in ['lista', 'precios', 'excel']) or \
                            any(palabra in href.lower() for palabra in ['lista', 'precios'])):
                            print(f"‚úÖ Enlace de descarga encontrado para Atonor: '{texto}'")
                            return elemento
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        print("‚ùå No se encontr√≥ enlace de descarga para Atonor")
        return None
    
    # Para Sinkromat, buscar elementos de descarga espec√≠ficos
    elif proveedor_nombre.lower() == 'sinkromat':
        print("üîç Buscando elemento de descarga espec√≠fico para Sinkromat...")
        
        selectores_sinkromat = [
            # Elemento espec√≠fico con texto "XLS Archivo de Excel"
            "//p[contains(text(), 'XLS Archivo de Excel')]",
            "//p[contains(text(), 'XLS')]",
            "//p[contains(text(), 'Archivo de Excel')]",
            # Elementos p con clase chakra-text que contengan "XLS" o "Excel"
            "p.chakra-text.css-896ql1",
            "//p[@class='chakra-text css-896ql1'][contains(text(), 'XLS')]",
            "//p[@class='chakra-text css-896ql1'][contains(text(), 'Excel')]",
            # Elementos p con clase chakra-text que contengan palabras clave
            "//p[contains(@class, 'chakra-text') and contains(text(), 'XLS')]",
            "//p[contains(@class, 'chakra-text') and contains(text(), 'Excel')]",
            "//p[contains(@class, 'chakra-text') and contains(text(), 'Archivo')]",
            # Fallback: cualquier elemento p que contenga "XLS" o "Excel"
            "//p[contains(text(), 'XLS')]",
            "//p[contains(text(), 'Excel')]",
            "//p[contains(text(), 'excel')]",
            # Elementos clickeables que contengan "XLS"
            "//*[contains(text(), 'XLS Archivo de Excel')]",
            "//*[contains(text(), 'XLS')]"
        ]
        
        for selector in selectores_sinkromat:
            try:
                if selector.startswith("//") or selector.startswith("//*"):
                    # Para selectores XPath
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed():
                        texto = elemento.text.strip()
                        tag_name = elemento.tag_name
                        clases = elemento.get_attribute("class") or ""
                        
                        print(f"üîç Elemento encontrado - Tag: '{tag_name}', Texto: '{texto}', Clases: '{clases}'")
                        
                        # Verificar que sea un elemento de descarga v√°lido para Sinkromat
                        if any(palabra in texto.lower() for palabra in ['xls', 'excel', 'archivo']):
                            print(f"‚úÖ Elemento de descarga encontrado para Sinkromat: '{texto}'")
                            return elemento
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        print("‚ùå No se encontr√≥ elemento de descarga para Sinkromat")
        return None
    
    else:
        # Para otros proveedores, usar la l√≥gica original
        selectores_especificos = [
            # Bot√≥n completo con clase success y icono Excel
            "button.btn-success:has(i.mdi-file-excel)",
            "button.btn-sm.btn-success:has(i.mdi-file-excel)",
            # Botones con tooltip que contengan Excel
            "button[data-bs-toggle='tooltip']:has(i.mdi-file-excel)",
            # Fallback: buscar iconos Excel y verificar que est√©n en botones v√°lidos
            "i.mdi-file-excel"
        ]
        
        for selector in selectores_especificos:
            try:
                if "i.mdi-file-excel" == selector:
                    # Para iconos, verificar que est√©n en botones v√°lidos
                    iconos = driver.find_elements(By.CSS_SELECTOR, selector)
                    for icono in iconos:
                        if icono.is_displayed():
                            # Buscar el bot√≥n padre
                            try:
                                boton_padre = icono.find_element(By.XPATH, "./ancestor::button[1]")
                                if boton_padre.is_displayed() and boton_padre.is_enabled():
                                    # Verificar que sea un bot√≥n de descarga v√°lido
                                    clases = boton_padre.get_attribute("class") or ""
                                    if "btn" in clases:
                                        print(f"‚úÖ Bot√≥n encontrado con selector: {selector}")
                                        return boton_padre
                            except:
                                continue
                else:
                    # Para selectores de botones directos
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                    for elemento in elementos:
                        if elemento.is_displayed() and elemento.is_enabled():
                            # Verificar que el bot√≥n tenga un icono Excel
                            try:
                                icono_excel = elemento.find_element(By.CSS_SELECTOR, "i.mdi-file-excel")
                                if icono_excel.is_displayed():
                                    print(f"‚úÖ Bot√≥n encontrado con selector: {selector}")
                                    return elemento
                            except:
                                continue
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        print("‚ùå No se encontr√≥ bot√≥n de Excel v√°lido")
        return None

def esperar_nueva_descarga(archivos_iniciales, timeout_minutos=3):
    """Esperar a que aparezca un nuevo archivo descargado - 3 minutos"""
    print(f"Esperando nueva descarga (hasta {timeout_minutos} minutos)...")
    
    tiempo_inicio = time.time()
    timeout_segundos = timeout_minutos * 60
    ultimo_reporte = 0
    
    while time.time() - tiempo_inicio < timeout_segundos:
        tiempo_transcurrido = time.time() - tiempo_inicio
        
        # Verificar archivos descarg√°ndose
        archivos_descargando = list(CARPETA_DESCARGAS.glob("*.crdownload")) + list(CARPETA_DESCARGAS.glob("*.tmp"))
        
        # Verificar archivos completados
        archivos_actuales = obtener_archivos_actuales()
        archivos_nuevos = archivos_actuales - archivos_iniciales
        
        # Reportar progreso cada 30 segundos
        if tiempo_transcurrido - ultimo_reporte > 30:
            minutos = int(tiempo_transcurrido // 60)
            segundos = int(tiempo_transcurrido % 60)
            print(f"‚è≥ Esperando... {minutos}m {segundos}s")
            
            if archivos_descargando:
                print(f"üì• {len(archivos_descargando)} archivo(s) descarg√°ndose...")
            
            ultimo_reporte = tiempo_transcurrido
        
        # Si hay archivos nuevos
        if archivos_nuevos:
            print(f"üìÑ Detectados {len(archivos_nuevos)} archivo(s) nuevo(s)")
            
            # Si no hay archivos descarg√°ndose, la descarga se complet√≥
            if not archivos_descargando:
                # Esperar un poco m√°s para asegurar
                time.sleep(3)
                archivos_descargando = list(CARPETA_DESCARGAS.glob("*.crdownload")) + list(CARPETA_DESCARGAS.glob("*.tmp"))
                
                if not archivos_descargando:
                    # Encontrar el archivo m√°s reciente
                    archivo_mas_reciente = max(archivos_nuevos, key=lambda x: x.stat().st_ctime)
                    
                    # Verificar que el archivo no est√© vac√≠o
                    if archivo_mas_reciente.stat().st_size > 1024:  # Al menos 1KB
                        print(f"‚úÖ Descarga completada: {archivo_mas_reciente.name}")
                        return archivo_mas_reciente
                    else:
                        print(f"‚ö†Ô∏è Archivo muy peque√±o, podr√≠a estar corrupto: {archivo_mas_reciente.name}")
        
        time.sleep(2)
    
    print(f"‚ö†Ô∏è Timeout despu√©s de {timeout_minutos} minutos")
    
    # Verificar si hay archivos nuevos aunque haya timeout
    archivos_actuales = obtener_archivos_actuales()
    archivos_nuevos = archivos_actuales - archivos_iniciales
    
    if archivos_nuevos:
        archivo_mas_reciente = max(archivos_nuevos, key=lambda x: x.stat().st_ctime)
        if archivo_mas_reciente.stat().st_size > 1024:
            print(f"‚ö†Ô∏è Encontrado archivo despu√©s de timeout: {archivo_mas_reciente.name}")
            return archivo_mas_reciente
    
    return None

def esperar_descarga_zip(archivos_iniciales, timeout_minutos=3):
    """Esperar espec√≠ficamente a que aparezca un archivo ZIP descargado"""
    print(f"‚è≥ Esperando descarga de archivo ZIP (hasta {timeout_minutos} minutos)...")
    
    tiempo_inicio = time.time()
    timeout_segundos = timeout_minutos * 60
    ultimo_reporte = 0
    
    while time.time() - tiempo_inicio < timeout_segundos:
        tiempo_transcurrido = time.time() - tiempo_inicio
        
        # Verificar archivos descarg√°ndose (incluyendo ZIP)
        archivos_descargando = (list(CARPETA_DESCARGAS.glob("*.crdownload")) + 
                               list(CARPETA_DESCARGAS.glob("*.tmp")) +
                               list(CARPETA_DESCARGAS.glob("*.part")))
        
        # Verificar archivos completados (todos los tipos)
        archivos_actuales = obtener_todos_archivos_actuales()
        archivos_nuevos = archivos_actuales - archivos_iniciales
        
        # Filtrar solo archivos ZIP
        archivos_zip_nuevos = [archivo for archivo in archivos_nuevos 
                              if archivo.suffix.lower() in ['.zip', '.rar', '.7z']]
        
        # Reportar progreso cada 15 segundos para ZIP
        if tiempo_transcurrido - ultimo_reporte > 15:
            minutos = int(tiempo_transcurrido // 60)
            segundos = int(tiempo_transcurrido % 60)
            print(f"‚è≥ Esperando ZIP... {minutos}m {segundos}s")
            
            if archivos_descargando:
                print(f"üì• {len(archivos_descargando)} archivo(s) descarg√°ndose...")
            
            if archivos_zip_nuevos:
                print(f"üì¶ {len(archivos_zip_nuevos)} archivo(s) ZIP detectado(s)")
            
            ultimo_reporte = tiempo_transcurrido
        
        # Si hay archivos ZIP nuevos
        if archivos_zip_nuevos:
            print(f"üì¶ Detectados {len(archivos_zip_nuevos)} archivo(s) ZIP nuevo(s)")
            
            # Si no hay archivos descarg√°ndose, la descarga se complet√≥
            if not archivos_descargando:
                # Esperar un poco m√°s para asegurar
                time.sleep(3)
                archivos_descargando = (list(CARPETA_DESCARGAS.glob("*.crdownload")) + 
                                       list(CARPETA_DESCARGAS.glob("*.tmp")) +
                                       list(CARPETA_DESCARGAS.glob("*.part")))
                
                if not archivos_descargando:
                    # Encontrar el archivo ZIP m√°s reciente
                    archivo_zip_reciente = max(archivos_zip_nuevos, key=lambda x: x.stat().st_ctime)
                    
                    # Verificar que el archivo no est√© vac√≠o
                    if archivo_zip_reciente.stat().st_size > 1024:  # Al menos 1KB
                        print(f"‚úÖ Descarga de ZIP completada: {archivo_zip_reciente.name}")
                        return archivo_zip_reciente
                    else:
                        print(f"‚ö†Ô∏è Archivo ZIP muy peque√±o, podr√≠a estar corrupto: {archivo_zip_reciente.name}")
        
        time.sleep(2)
    
    print(f"‚ö†Ô∏è Timeout despu√©s de {timeout_minutos} minutos esperando ZIP")
    
    # Verificar si hay archivos ZIP nuevos aunque haya timeout
    archivos_actuales = obtener_todos_archivos_actuales()
    archivos_nuevos = archivos_actuales - archivos_iniciales
    archivos_zip_nuevos = [archivo for archivo in archivos_nuevos 
                          if archivo.suffix.lower() in ['.zip', '.rar', '.7z']]
    
    if archivos_zip_nuevos:
        archivo_zip_reciente = max(archivos_zip_nuevos, key=lambda x: x.stat().st_ctime)
        if archivo_zip_reciente.stat().st_size > 1024:
            print(f"‚ö†Ô∏è Encontrado archivo ZIP despu√©s de timeout: {archivo_zip_reciente.name}")
            return archivo_zip_reciente
    
    return None

def renombrar_archivo_descargado(archivo, proveedor_nombre):
    """Renombrar archivo descargado con nombre del proveedor"""
    try:
        nuevo_nombre = CARPETA_DESCARGAS / f"{proveedor_nombre}_{fecha}.xlsx"
        
        # Evitar sobrescribir archivos existentes
        contador = 1
        while nuevo_nombre.exists():
            nuevo_nombre = CARPETA_DESCARGAS / f"{proveedor_nombre}_{fecha}_{contador}.xlsx"
            contador += 1
        
        archivo.rename(nuevo_nombre)
        print(f"‚úÖ Archivo renombrado a: {nuevo_nombre.name}")
        return nuevo_nombre
    except Exception as e:
        print(f"‚ùå Error al renombrar archivo: {e}")
        return archivo

def hacer_login_ventor(driver, proveedor, wait):
    """Manejar el login especial para Ventor con modal"""
    print("üîß Procesando login especial para Ventor...")
    
    try:
        # Buscar el enlace espec√≠fico que abre el modal
        print("üîç Buscando enlace que abre el modal de login...")
        
        # Selector espec√≠fico para el enlace que abre el modal
        selector_modal = 'a.modal-action[data-target="#modalLoginUserHome"]'
        
        try:
            enlace_modal = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector_modal)))
            print("‚úÖ Enlace del modal encontrado")
        except:
            # Fallback: buscar por partes
            enlace_modal = None
            selectores_fallback = [
                'a[data-target="#modalLoginUserHome"]',
                'a.modal-action',
                'a:has(i.fas.fa-user-circle)',
                'i.fas.fa-user-circle'
            ]
            
            for selector in selectores_fallback:
                try:
                    if selector == 'i.fas.fa-user-circle':
                        # Si es el icono, buscar el enlace padre
                        icono = driver.find_element(By.CSS_SELECTOR, selector)
                        enlace_modal = icono.find_element(By.XPATH, "./ancestor::a[1]")
                    else:
                        enlace_modal = driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if enlace_modal and enlace_modal.is_displayed():
                        print(f"‚úÖ Enlace encontrado con selector fallback: {selector}")
                        break
                except:
                    continue
            
            if not enlace_modal:
                raise Exception("No se encontr√≥ el enlace que abre el modal")
        
        # Hacer scroll al enlace
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", enlace_modal)
        time.sleep(2)
        
        # Hacer clic en el enlace para abrir el modal
        print("üñ±Ô∏è Haciendo clic en enlace para abrir modal...")
        driver.execute_script("arguments[0].click();", enlace_modal)
        time.sleep(3)
        
        # Esperar a que el modal sea visible
        print("‚è≥ Esperando que el modal sea visible...")
        try:
            modal = wait.until(EC.visibility_of_element_located((By.ID, "modalLoginUserHome")))
            print("‚úÖ Modal visible")
        except:
            print("‚ö†Ô∏è No se pudo detectar el modal, continuando...")
        
        # Esperar a que los campos de login sean interactuables
        print("‚è≥ Esperando campos de login...")
        
        # Esperar el campo de usuario con m√∫ltiples intentos
        usuario_field = None
        for intento in range(5):
            try:
                usuario_field = wait.until(EC.element_to_be_clickable((By.ID, "login_username")))
                print("‚úÖ Campo de usuario encontrado y clickeable")
                break
            except:
                print(f"‚è≥ Intento {intento + 1}/5 - Esperando campo de usuario...")
                time.sleep(2)
        
        if not usuario_field:
            raise Exception("No se pudo encontrar el campo de usuario interactuable")
        
        # Esperar el campo de contrase√±a
        password_field = None
        for intento in range(5):
            try:
                password_field = wait.until(EC.element_to_be_clickable((By.ID, "login_password")))
                print("‚úÖ Campo de contrase√±a encontrado y clickeable")
                break
            except:
                print(f"‚è≥ Intento {intento + 1}/5 - Esperando campo de contrase√±a...")
                time.sleep(2)
        
        if not password_field:
            raise Exception("No se pudo encontrar el campo de contrase√±a interactuable")
        
        # Llenar los campos con m√°s cuidado
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de usuario
        try:
            usuario_field.clear()
            time.sleep(1)
            usuario_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Usuario ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar usuario: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", usuario_field)
            print("‚úÖ Usuario ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # Buscar y hacer clic en el bot√≥n de submit espec√≠fico de Ventor
        print("üîç Buscando bot√≥n 'Iniciar sesi√≥n'...")
        
        # Selectores espec√≠ficos para el bot√≥n de Ventor
        selectores_submit = [
            # Selector espec√≠fico para el bot√≥n de Ventor
            "button.button.button--primary.loginHome",
            "button.loginHome",
            ".button--primary.loginHome",
            # Fallbacks por texto
            "//button[contains(text(), 'Iniciar sesi√≥n')]",
            "//button[contains(text(), 'Iniciar')]",
            "//button[contains(text(), 'Login')]",
            # Fallbacks por clases
            "#modalLoginUserHome button.button--primary",
            "#modalLoginUserHome .loginHome",
            "#modalLoginUserHome button[type='button']",
            # Fallbacks generales en el modal
            "#modalLoginUserHome button"
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    print(f"‚úÖ Bot√≥n de submit encontrado con selector: {selector}")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if not submit_button:
            # B√∫squeda m√°s exhaustiva
            print("üîç B√∫squeda exhaustiva de bot√≥n de submit...")
            try:
                # Buscar todos los botones en el modal
                botones = driver.find_elements(By.CSS_SELECTOR, "#modalLoginUserHome button")
                for boton in botones:
                    if boton.is_displayed() and boton.is_enabled():
                        texto = boton.text.strip().lower()
                        clases = boton.get_attribute("class") or ""
                        print(f"üîç Bot√≥n encontrado - Texto: '{texto}', Clases: '{clases}'")
                        
                        if any(palabra in texto for palabra in ['iniciar', 'login', 'ingresar', 'entrar']):
                            submit_button = boton
                            print(f"‚úÖ Bot√≥n seleccionado por texto: '{texto}'")
                            break
                        elif 'loginHome' in clases or 'button--primary' in clases:
                            submit_button = boton
                            print(f"‚úÖ Bot√≥n seleccionado por clase: '{clases}'")
                            break
                
                # Si no encontramos por texto o clase, tomar el primer bot√≥n visible
                if not submit_button and botones:
                    for boton in botones:
                        if boton.is_displayed() and boton.is_enabled():
                            submit_button = boton
                            print(f"‚úÖ Usando primer bot√≥n disponible")
                            break
            except Exception as e:
                print(f"‚ö†Ô∏è Error en b√∫squeda exhaustiva: {e}")
        
        if submit_button:
            print("üöÄ Haciendo clic en bot√≥n de submit...")
            try:
                # Hacer scroll al bot√≥n
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", submit_button)
                time.sleep(1)
                
                # Intentar clic normal primero
                submit_button.click()
                print("‚úÖ Clic normal exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                # Si falla el clic normal, usar JavaScript
                driver.execute_script("arguments[0].click();", submit_button)
                print("‚úÖ Clic con JavaScript exitoso")
        else:
            # Si no hay bot√≥n, intentar enviar con Enter en el campo de contrase√±a
            print("‚å®Ô∏è No se encontr√≥ bot√≥n, enviando formulario con Enter...")
            password_field.send_keys("\n")
        
        time.sleep(5)
        print("‚úÖ Login de Ventor completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Ventor: {e}")

def hacer_login_icepar(driver, proveedor, wait):
    """Manejar el login espec√≠fico para Icepar"""
    print("üîß Procesando login espec√≠fico para Icepar...")
    
    try:
        # Buscar campo de email espec√≠fico de Icepar
        print("üîç Buscando campo de email...")
        email_field = wait.until(EC.element_to_be_clickable((By.ID, "email")))
        print("‚úÖ Campo de email encontrado")
        
        # Buscar campo de contrase√±a espec√≠fico de Icepar
        print("üîç Buscando campo de contrase√±a...")
        password_field = wait.until(EC.element_to_be_clickable((By.ID, "password")))
        print("‚úÖ Campo de contrase√±a encontrado")
        
        # Llenar los campos
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de email
        try:
            email_field.clear()
            time.sleep(1)
            email_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Email ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar email: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", email_field)
            print("‚úÖ Email ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # Buscar bot√≥n de submit
        print("üîç Buscando bot√≥n de submit...")
        
        selectores_submit = [
            "button[type='submit']",
            "input[type='submit']",
            "//button[contains(text(), 'Ingresar')]",
            "//button[contains(text(), 'Login')]",
            "//button[contains(text(), 'Entrar')]",
            "//input[contains(@value, 'Ingresar')]",
            "//input[contains(@value, 'Login')]",
            ".btn-primary",
            ".btn-success",
            "button"
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    print(f"‚úÖ Bot√≥n de submit encontrado con selector: {selector}")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if submit_button:
            print("üöÄ Haciendo clic en bot√≥n de submit...")
            try:
                submit_button.click()
                print("‚úÖ Clic normal exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", submit_button)
                print("‚úÖ Clic con JavaScript exitoso")
        else:
            # Si no hay bot√≥n, intentar enviar con Enter
            print("‚å®Ô∏è No se encontr√≥ bot√≥n, enviando formulario con Enter...")
            password_field.send_keys("\n")
        
        time.sleep(5)
        print("‚úÖ Login de Icepar completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Icepar: {e}")

def hacer_login_atonor(driver, proveedor, wait):
    """Manejar el login espec√≠fico para Atonor"""
    print("üîß Procesando login espec√≠fico para Atonor...")
    
    try:
        # Buscar campo de usuario espec√≠fico de Atonor (con name="log")
        print("üîç Buscando campo de usuario...")
        
        # Intentar m√∫ltiples selectores para el campo de usuario
        selectores_usuario = [
            'input[name="log"]',
            'input[id*="user-"]',
            'input[id*="user"]',
            'input.elementor-field-textual[type="text"]',
            'input[placeholder*="usuario"]',
            'input[placeholder*="Usuario"]'
        ]
        
        usuario_field = None
        for selector in selectores_usuario:
            try:
                usuario_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de usuario encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not usuario_field:
            raise Exception("No se pudo encontrar el campo de usuario")
        
        # Buscar campo de contrase√±a espec√≠fico de Atonor (con name="pwd")
        print("üîç Buscando campo de contrase√±a...")
        
        selectores_password = [
            'input[name="pwd"]',
            'input[id*="password-"]',
            'input[id*="password"]',
            'input.elementor-field-textual[type="password"]',
            'input[placeholder*="contrase√±a"]',
            'input[placeholder*="Contrase√±a"]'
        ]
        
        password_field = None
        for selector in selectores_password:
            try:
                password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de contrase√±a encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not password_field:
            raise Exception("No se pudo encontrar el campo de contrase√±a")
        
        # Llenar los campos
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de usuario
        try:
            usuario_field.clear()
            time.sleep(1)
            usuario_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Usuario ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar usuario: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", usuario_field)
            print("‚úÖ Usuario ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # Buscar bot√≥n de submit
        print("üîç Buscando bot√≥n de submit...")
        
        selectores_submit = [
            "button[type='submit']",
            "input[type='submit']",
            "//button[contains(text(), 'Ingresar')]",
            "//button[contains(text(), 'Login')]",
            "//button[contains(text(), 'Entrar')]",
            "//input[contains(@value, 'Ingresar')]",
            "//input[contains(@value, 'Login')]",
            ".elementor-button",
            ".btn-primary",
            ".btn-success",
            "button"
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    print(f"‚úÖ Bot√≥n de submit encontrado con selector: {selector}")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if submit_button:
            print("üöÄ Haciendo clic en bot√≥n de submit...")
            try:
                submit_button.click()
                print("‚úÖ Clic normal exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", submit_button)
                print("‚úÖ Clic con JavaScript exitoso")
        else:
            # Si no hay bot√≥n, intentar enviar con Enter
            print("‚å®Ô∏è No se encontr√≥ bot√≥n, enviando formulario con Enter...")
            password_field.send_keys("\n")
        
        time.sleep(5)
        print("‚úÖ Login de Atonor completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Atonor: {e}")

def hacer_login_sinkromat(driver, proveedor, wait):
    """Manejar el login espec√≠fico para Sinkromat"""
    print("üîß Procesando login espec√≠fico para Sinkromat...")
    
    try:
        # Buscar campo de email espec√≠fico de Sinkromat (con placeholder="Email")
        print("üîç Buscando campo de email...")
        
        # Intentar m√∫ltiples selectores para el campo de email
        selectores_email = [
            'input[placeholder="Email"]',
            'input.chakra-input.css-zncb5o[placeholder="Email"]',
            'input.chakra-input[placeholder="Email"]',
            'input[placeholder*="Email"]',
            'input[placeholder*="email"]',
            'input.chakra-input[type="text"]',
            'input.chakra-input.css-zncb5o'
        ]
        
        email_field = None
        for selector in selectores_email:
            try:
                email_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de email encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not email_field:
            raise Exception("No se pudo encontrar el campo de email")
        
        # Buscar campo de contrase√±a espec√≠fico de Sinkromat (con placeholder="Contrase√±a")
        print("üîç Buscando campo de contrase√±a...")
        
        selectores_password = [
            'input[placeholder="Contrase√±a"]',
            'input.chakra-input.css-zncb5o[placeholder="Contrase√±a"]',
            'input.chakra-input[placeholder="Contrase√±a"]',
            'input[placeholder*="Contrase√±a"]',
            'input[placeholder*="contrase√±a"]',
            'input.chakra-input[type="password"]',
            'input[type="password"].chakra-input.css-zncb5o'
        ]
        
        password_field = None
        for selector in selectores_password:
            try:
                password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                print(f"‚úÖ Campo de contrase√±a encontrado con selector: {selector}")
                break
            except:
                continue
        
        if not password_field:
            raise Exception("No se pudo encontrar el campo de contrase√±a")
        
        # Llenar los campos
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de email
        try:
            email_field.clear()
            time.sleep(1)
            email_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Email ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar email: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", email_field)
            print("‚úÖ Email ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            # Intentar con JavaScript
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # Buscar bot√≥n de submit espec√≠fico de Sinkromat
        print("üîç Buscando bot√≥n 'INGRESAR'...")
        
        selectores_submit = [
            # Selector espec√≠fico para el bot√≥n de Sinkromat
            'button.chakra-button.css-1opa624',
            'button.chakra-button[type="button"]',
            '//button[contains(text(), "INGRESAR")]',
            '//button[contains(text(), "Ingresar")]',
            '//button[contains(text(), "ingresar")]',
            # Fallbacks por clases de Chakra UI
            'button.chakra-button',
            'button[class*="chakra-button"]',
            'button[class*="css-1opa624"]',
            # Fallbacks generales
            'button[type="button"]',
            'button'
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    # Para selectores XPath
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    # Para selectores CSS
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    texto = submit_button.text.strip()
                    print(f"‚úÖ Bot√≥n de submit encontrado con selector: {selector}, texto: '{texto}'")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if not submit_button:
            # B√∫squeda m√°s exhaustiva
            print("üîç B√∫squeda exhaustiva de bot√≥n de submit...")
            try:
                # Buscar todos los botones
                botones = driver.find_elements(By.TAG_NAME, "button")
                for boton in botones:
                    if boton.is_displayed() and boton.is_enabled():
                        texto = boton.text.strip().lower()
                        clases = boton.get_attribute("class") or ""
                        print(f"üîç Bot√≥n encontrado - Texto: '{texto}', Clases: '{clases}'")
                        
                        if any(palabra in texto for palabra in ['ingresar', 'login', 'entrar']):
                            submit_button = boton
                            print(f"‚úÖ Bot√≥n seleccionado por texto: '{texto}'")
                            break
                        elif 'chakra-button' in clases:
                            submit_button = boton
                            print(f"‚úÖ Bot√≥n seleccionado por clase Chakra: '{clases}'")
                            break
                
                # Si no encontramos por texto o clase, tomar el primer bot√≥n Chakra visible
                if not submit_button:
                    for boton in botones:
                        if boton.is_displayed() and boton.is_enabled():
                            clases = boton.get_attribute("class") or ""
                            if 'chakra-button' in clases:
                                submit_button = boton
                                print(f"‚úÖ Usando primer bot√≥n Chakra disponible")
                                break
            except Exception as e:
                print(f"‚ö†Ô∏è Error en b√∫squeda exhaustiva: {e}")
        
        if submit_button:
            print("üöÄ Haciendo clic en bot√≥n de submit...")
            try:
                # Hacer scroll al bot√≥n
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", submit_button)
                time.sleep(1)
                
                # Intentar clic normal primero
                submit_button.click()
                print("‚úÖ Clic normal exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                # Si falla el clic normal, usar JavaScript
                driver.execute_script("arguments[0].click();", submit_button)
                print("‚úÖ Clic con JavaScript exitoso")
        else:
            # Si no hay bot√≥n, intentar enviar con Enter
            print("‚å®Ô∏è No se encontr√≥ bot√≥n, enviando formulario con Enter...")
            password_field.send_keys("\n")
        
        time.sleep(5)
        print("‚úÖ Login de Sinkromat completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Sinkromat: {e}")

def hacer_login_expoyer(driver, proveedor, wait):
    """Manejar el login espec√≠fico para Expoyer con men√∫ desplegable"""
    print("üîß Procesando login espec√≠fico para Expoyer...")
    
    try:
        # PASO 1: Buscar y hacer clic en el bot√≥n del men√∫ desplegable
        print("üîç Buscando bot√≥n del men√∫ desplegable de login...")
        
        selectores_dropdown = [
            # Selector espec√≠fico para el bot√≥n de Expoyer
            'button.btn.dropdown-toggle.btn-default.btn-sm[data-toggle="dropdown"]',
            'button.dropdown-toggle.btn-default.btn-sm',
            'button.btn.dropdown-toggle[data-toggle="dropdown"]',
            # Por icono y texto
            '//button[contains(@class, "dropdown-toggle") and .//i[contains(@class, "fa-lock")] and contains(text(), "Login")]',
            '//button[contains(@class, "dropdown-toggle") and contains(text(), "Login")]',
            # Fallbacks
            'button.dropdown-toggle',
            'button[data-toggle="dropdown"]'
        ]
        
        dropdown_button = None
        for selector in selectores_dropdown:
            try:
                if selector.startswith("//"):
                    dropdown_button = driver.find_element(By.XPATH, selector)
                else:
                    dropdown_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if dropdown_button and dropdown_button.is_displayed() and dropdown_button.is_enabled():
                    texto = dropdown_button.text.strip()
                    clases = dropdown_button.get_attribute("class") or ""
                    print(f"‚úÖ Bot√≥n dropdown encontrado - Texto: '{texto}', Clases: '{clases}'")
                    break
                else:
                    dropdown_button = None
            except:
                continue
        
        if not dropdown_button:
            raise Exception("No se encontr√≥ el bot√≥n del men√∫ desplegable")
        
        # Hacer clic en el bot√≥n dropdown
        print("üñ±Ô∏è Haciendo clic en bot√≥n del men√∫ desplegable...")
        try:
            dropdown_button.click()
            print("‚úÖ Men√∫ desplegable abierto")
        except Exception as e:
            print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
            driver.execute_script("arguments[0].click();", dropdown_button)
            print("‚úÖ Men√∫ desplegable abierto con JavaScript")
        
        time.sleep(2)
        
        # PASO 2: Buscar campos de login que ahora deber√≠an estar visibles
        print("üîç Buscando campos de login...")
        
        # Buscar campo de usuario espec√≠fico
        usuario_field = None
        try:
            usuario_field = wait.until(EC.element_to_be_clickable((By.ID, "login-user")))
            print("‚úÖ Campo de usuario encontrado")
        except:
            # Fallback por selector
            try:
                usuario_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="j_username"]')))
                print("‚úÖ Campo de usuario encontrado por name")
            except:
                raise Exception("No se pudo encontrar el campo de usuario")
        
        # Buscar campo de contrase√±a espec√≠fico
        password_field = None
        try:
            password_field = wait.until(EC.element_to_be_clickable((By.ID, "login-password")))
            print("‚úÖ Campo de contrase√±a encontrado")
        except:
            # Fallback por selector
            try:
                password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="j_password"]')))
                print("‚úÖ Campo de contrase√±a encontrado por name")
            except:
                raise Exception("No se pudo encontrar el campo de contrase√±a")
        
        # PASO 3: Llenar los campos
        print("üìù Llenando campos de login...")
        
        # Limpiar y llenar campo de usuario
        try:
            usuario_field.clear()
            time.sleep(1)
            usuario_field.send_keys(proveedor["usuario"])
            print(f"‚úÖ Usuario ingresado: {proveedor['usuario']}")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar usuario: {e}")
            driver.execute_script(f"arguments[0].value = '{proveedor['usuario']}';", usuario_field)
            print("‚úÖ Usuario ingresado con JavaScript")
        
        # Limpiar y llenar campo de contrase√±a
        try:
            password_field.clear()
            time.sleep(1)
            password_field.send_keys(proveedor["contrasena"])
            print("‚úÖ Contrase√±a ingresada")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al llenar contrase√±a: {e}")
            driver.execute_script(f"arguments[0].value = '{proveedor['contrasena']}';", password_field)
            print("‚úÖ Contrase√±a ingresada con JavaScript")
        
        # PASO 4: Buscar y hacer clic en el bot√≥n INGRESAR
        print("üîç Buscando bot√≥n 'INGRESAR'...")
        
        selectores_submit = [
            # Selector espec√≠fico para el bot√≥n de Expoyer
            'button#submitButton.btn.btn-default.btn-md.pull-right.mt-20.no-marge',
            'button#submitButton',
            '#submitButton',
            # Por texto
            '//button[contains(text(), "INGRESAR")]',
            '//button[contains(text(), "Ingresar")]',
            # Fallbacks
            'button[type="submit"]',
            'button.btn.btn-default.btn-md'
        ]
        
        submit_button = None
        for selector in selectores_submit:
            try:
                if selector.startswith("//"):
                    submit_button = driver.find_element(By.XPATH, selector)
                else:
                    submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if submit_button and submit_button.is_displayed() and submit_button.is_enabled():
                    texto = submit_button.text.strip()
                    print(f"‚úÖ Bot√≥n submit encontrado - Texto: '{texto}'")
                    break
                else:
                    submit_button = None
            except:
                continue
        
        if not submit_button:
            raise Exception("No se encontr√≥ el bot√≥n INGRESAR")
        
        # Hacer clic en el bot√≥n INGRESAR
        print("üöÄ Haciendo clic en bot√≥n INGRESAR...")
        try:
            submit_button.click()
            print("‚úÖ Clic normal exitoso")
        except Exception as e:
            print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
            driver.execute_script("arguments[0].click();", submit_button)
            print("‚úÖ Clic con JavaScript exitoso")
        
        time.sleep(5)
        print("‚úÖ Login de Expoyer completado")
        
    except Exception as e:
        raise Exception(f"Error en login de Expoyer: {e}")

def descargar_archivo_expoyer(driver, wait):
    """Manejar la descarga espec√≠fica de Expoyer con checkbox y confirmaci√≥n"""
    print("üì• Iniciando descarga espec√≠fica de Expoyer...")
    
    try:
        # Obtener archivos antes de la descarga (TODOS los archivos, no solo Excel)
        archivos_iniciales = obtener_todos_archivos_actuales()
        print(f"üìÅ Archivos iniciales detectados: {len(archivos_iniciales)}")
        
        # PASO 1: Marcar el checkbox para seleccionar todos
        print("üîç Buscando switch para marcar todos...")
        
        # Primero intentar con el label (que es lo que el usuario ve y hace clic)
        selectores_label = [
            'label.switch-label[for="switch"]',
            'label[for="switch"]',
            '.switch-label'
        ]
        
        label_encontrado = None
        for selector in selectores_label:
            try:
                label_encontrado = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                if label_encontrado.is_displayed():
                    print(f"‚úÖ Label del switch encontrado con selector: {selector}")
                    break
                else:
                    label_encontrado = None
            except:
                continue
        
        # Si encontramos el label, intentamos hacer clic en √©l
        if label_encontrado:
            print("‚òëÔ∏è Haciendo clic en el label del switch...")
            try:
                # Hacer scroll al label
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", label_encontrado)
                time.sleep(1)
                
                # Intentar clic normal
                label_encontrado.click()
                print("‚úÖ Clic en label exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal en label fall√≥: {e}, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", label_encontrado)
                print("‚úÖ Clic en label con JavaScript exitoso")
            
            time.sleep(3)  # Dar tiempo para que se procese el cambio
        else:
            # Si no encontramos el label, intentamos con el input directamente
            print("üîç Label no encontrado, buscando input del switch...")
            
            selectores_checkbox = [
                'input#switch.switch-input[type="checkbox"]',
                'input#switch[type="checkbox"]',
                '#switch',
                'input.switch-input[type="checkbox"]'
            ]
            
            checkbox = None
            for selector in selectores_checkbox:
                try:
                    checkbox = driver.find_element(By.CSS_SELECTOR, selector)
                    if checkbox:
                        print(f"‚úÖ Input del switch encontrado con selector: {selector}")
                        break
                except:
                    continue
            
            if checkbox:
                # Verificar si ya est√° marcado
                if not checkbox.is_selected():
                    print("‚òëÔ∏è Marcando checkbox con JavaScript...")
                    try:
                        # Usar JavaScript para cambiar el estado directamente
                        driver.execute_script("arguments[0].checked = true; arguments[0].dispatchEvent(new Event('change', { 'bubbles': true }));", checkbox)
                        print("‚úÖ Checkbox marcado con JavaScript")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error al marcar checkbox con JavaScript: {e}")
                else:
                    print("‚úÖ Checkbox ya estaba marcado")
            else:
                print("‚ö†Ô∏è No se encontr√≥ ni el label ni el input del switch")
                # Intentar continuar de todos modos
        
        # Verificar si el switch se activ√≥ correctamente
        try:
            # Esperar un momento para que se procese el cambio
            time.sleep(3)
            
            # Intentar verificar si hay elementos seleccionados
            elementos_seleccionados = driver.find_elements(By.CSS_SELECTOR, '.selected, [data-selected="true"], .active')
            if elementos_seleccionados:
                print(f"‚úÖ Se detectaron {len(elementos_seleccionados)} elementos seleccionados")
            else:
                print("‚ö†Ô∏è No se detectaron elementos seleccionados, pero continuando...")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al verificar elementos seleccionados: {e}")
        
        # PASO 2: Hacer clic en el bot√≥n "Descargar XLS"
        print("üîç Buscando bot√≥n 'Descargar XLS'...")
        
        selectores_xls = [
            # Selector espec√≠fico para el bot√≥n XLS de Expoyer
            'button#xls.btn.btn-primary',
            'button#xls',
            '#xls',
            '//button[@id="xls" and .//i[contains(@class, "fa-file-excel-o")]]',
            '//button[contains(text(), "Descargar XLS")]',
            # Fallbacks
            'button.btn.btn-primary:has(i.fa-file-excel-o)',
            'button:has(i.fa-file-excel-o)',
            'button.btn.btn-primary',
            'button.btn-primary'
        ]
        
        xls_button = None
        for selector in selectores_xls:
            try:
                if selector.startswith("//"):
                    xls_button = driver.find_element(By.XPATH, selector)
                else:
                    xls_button = driver.find_element(By.CSS_SELECTOR, selector)
                
                if xls_button and xls_button.is_displayed() and xls_button.is_enabled():
                    texto = xls_button.text.strip()
                    print(f"‚úÖ Bot√≥n XLS encontrado - Texto: '{texto}'")
                    break
                else:
                    xls_button = None
            except:
                continue
        
        if not xls_button:
            raise Exception("No se encontr√≥ el bot√≥n 'Descargar XLS'")
        
        # Hacer clic en el bot√≥n XLS
        print("üñ±Ô∏è Haciendo clic en bot√≥n 'Descargar XLS'...")
        try:
            # Hacer scroll al bot√≥n
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", xls_button)
            time.sleep(2)
            
            # Intentar clic normal
            xls_button.click()
            print("‚úÖ Bot√≥n XLS clickeado")
        except Exception as e:
            print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
            driver.execute_script("arguments[0].click();", xls_button)
            print("‚úÖ Bot√≥n XLS clickeado con JavaScript")
        
        time.sleep(3)
        
        # PASO 3: Buscar y hacer clic en el bot√≥n "Continuar" del men√∫ de confirmaci√≥n
        print("üîç Buscando bot√≥n 'Continuar' en men√∫ de confirmaci√≥n...")
        
        selectores_continuar = [
            # Selector espec√≠fico para el bot√≥n Continuar
            'button.btn.btn-sm.btn-success[title="Continuar"]',
            'button.btn.btn-success[title="Continuar"]',
            'button[title="Continuar"]',
            '//button[@title="Continuar" and contains(text(), "Continuar")]',
            '//button[contains(text(), "Continuar")]',
            # Fallbacks
            'button.btn-success',
            'button.btn.btn-sm.btn-success',
            '.btn-success',
            '.btn.btn-success'
        ]
        
        continuar_button = None
        for selector in selectores_continuar:
            try:
                if selector.startswith("//"):
                    elementos = driver.find_elements(By.XPATH, selector)
                else:
                    elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for elemento in elementos:
                    if elemento.is_displayed() and elemento.is_enabled():
                        texto = elemento.text.strip()
                        title = elemento.get_attribute("title") or ""
                        print(f"‚úÖ Bot√≥n Continuar encontrado - Texto: '{texto}', Title: '{title}'")
                        continuar_button = elemento
                        break
                
                if continuar_button:
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        if not continuar_button:
            # Intentar buscar en cualquier modal o di√°logo visible
            print("üîç Buscando bot√≥n Continuar en cualquier modal visible...")
            try:
                # Buscar modales visibles
                modales = driver.find_elements(By.CSS_SELECTOR, '.modal.show, .modal[style*="display: block"], .dialog[style*="display: block"]')
                for modal in modales:
                    # Buscar botones dentro del modal
                    botones = modal.find_elements(By.CSS_SELECTOR, 'button')
                    for boton in botones:
                        if boton.is_displayed() and boton.is_enabled():
                            texto = boton.text.strip()
                            if "continuar" in texto.lower() or "aceptar" in texto.lower() or "ok" in texto.lower():
                                continuar_button = boton
                                print(f"‚úÖ Bot√≥n encontrado en modal - Texto: '{texto}'")
                                break
                    
                    if continuar_button:
                        break
            except Exception as e:
                print(f"‚ö†Ô∏è Error al buscar en modales: {e}")
        
        if continuar_button:
            # Hacer clic en el bot√≥n Continuar
            print("üñ±Ô∏è Haciendo clic en bot√≥n 'Continuar'...")
            try:
                # Hacer scroll al bot√≥n
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", continuar_button)
                time.sleep(1)
                
                # Intentar clic normal
                continuar_button.click()
                print("‚úÖ Bot√≥n Continuar clickeado")
            except Exception as e:
                print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
                driver.execute_script("arguments[0].click();", continuar_button)
                print("‚úÖ Bot√≥n Continuar clickeado con JavaScript")
        else:
            print("‚ö†Ô∏è No se encontr√≥ el bot√≥n 'Continuar', intentando continuar...")
        
        # PASO 4: Esperar y buscar el enlace de descarga final
        print("‚è≥ Esperando que se prepare el archivo...")
        time.sleep(5)
        
        print("üîç Buscando enlace de descarga final...")
        
        selectores_link = [
            # Selector espec√≠fico para el enlace de descarga
            'a#link[href="/catalogo/descargar/ARTICULOS-XLS.ZIP"]',
            'a#link',
            '#link',
            'a[href*="ARTICULOS-XLS.ZIP"]',
            'a[href*="/catalogo/descargar/"]',
            # Fallbacks
            'a[href*=".ZIP"]',
            'a[href*=".zip"]',
            'a:contains("aqu√≠")',
            '//a[contains(text(), "aqu√≠")]'
        ]
        
        download_link = None
        # Intentar encontrar el enlace con m√∫ltiples intentos
        for intento in range(15):  # 15 intentos, 45 segundos total
            for selector in selectores_link:
                try:
                    if selector.startswith("//"):
                        elementos = driver.find_elements(By.XPATH, selector)
                    elif selector.startswith("a:contains"):
                        # Caso especial para texto "aqu√≠"
                        enlaces = driver.find_elements(By.TAG_NAME, "a")
                        elementos = [enlace for enlace in enlaces if "aqu√≠" in enlace.text.lower()]
                    else:
                        elementos = driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for elemento in elementos:
                        if elemento.is_displayed():
                            href = elemento.get_attribute("href") or ""
                            texto = elemento.text.strip()
                            print(f"‚úÖ Enlace de descarga encontrado - Href: '{href}', Texto: '{texto}'")
                            download_link = elemento
                            break
                    
                    if download_link:
                        break
                except Exception as e:
                    print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                    continue
            
            if download_link:
                break
            
            print(f"‚è≥ Intento {intento + 1}/15 - Esperando enlace de descarga...")
            time.sleep(3)
        
        if not download_link:
            # √öltimo intento: buscar cualquier enlace visible que pueda ser de descarga
            print("üîç B√∫squeda final de cualquier enlace de descarga...")
            try:
                enlaces = driver.find_elements(By.TAG_NAME, "a")
                for enlace in enlaces:
                    if enlace.is_displayed():
                        href = enlace.get_attribute("href") or ""
                        texto = enlace.text.strip()
                        if (".zip" in href.lower() or 
                            ".xls" in href.lower() or 
                            "descargar" in href.lower() or 
                            "download" in href.lower() or
                            "aqu√≠" in texto.lower()):
                            print(f"‚úÖ Posible enlace de descarga encontrado - Href: '{href}', Texto: '{texto}'")
                            download_link = enlace
                            break
            except Exception as e:
                print(f"‚ö†Ô∏è Error en b√∫squeda final: {e}")
        
        if not download_link:
            raise Exception("No se encontr√≥ el enlace de descarga final")
        
        # PASO 5: Hacer clic en el enlace de descarga
        print("üì• Haciendo clic en enlace de descarga...")
        try:
            # Hacer scroll al enlace
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", download_link)
            time.sleep(1)
            
            # Intentar clic normal
            download_link.click()
            print("‚úÖ Descarga iniciada")
        except Exception as e:
            print(f"‚ö†Ô∏è Clic normal fall√≥: {e}, intentando con JavaScript...")
            driver.execute_script("arguments[0].click();", download_link)
            print("‚úÖ Descarga iniciada con JavaScript")
        
        # PASO 6: Esperar descarga del ZIP usando la funci√≥n espec√≠fica
        print("‚è≥ Esperando descarga del archivo ZIP...")
        archivo_zip = esperar_descarga_zip(archivos_iniciales, timeout_minutos=3)
        
        if not archivo_zip:
            # Verificar si hay alg√∫n archivo nuevo aunque no sea ZIP
            print("üîç Verificando si hay archivos nuevos de cualquier tipo...")
            archivos_actuales = obtener_todos_archivos_actuales()
            archivos_nuevos = archivos_actuales - archivos_iniciales
            
            if archivos_nuevos:
                print(f"üìÑ Se encontraron {len(archivos_nuevos)} archivo(s) nuevo(s):")
                for archivo in archivos_nuevos:
                    print(f"   üìÑ {archivo.name} ({archivo.suffix}) - {archivo.stat().st_size} bytes")
                
                # Buscar archivos que podr√≠an ser el ZIP con nombre diferente
                posibles_zip = [archivo for archivo in archivos_nuevos 
                               if archivo.suffix.lower() in ['.zip', '.rar', '.7z'] or 
                               'articulos' in archivo.name.lower() or
                               'xls' in archivo.name.lower()]
                
                if posibles_zip:
                    archivo_zip = posibles_zip[0]
                    print(f"‚úÖ Archivo ZIP encontrado con nombre diferente: {archivo_zip.name}")
                else:
                    raise Exception("No se descarg√≥ ning√∫n archivo ZIP")
            else:
                raise Exception("No se descarg√≥ ning√∫n archivo")
        
        print(f"‚úÖ Archivo ZIP descargado: {archivo_zip.name}")
        
        # PASO 7: Descomprimir el ZIP y extraer el Excel
        print("üì¶ Descomprimiendo archivo ZIP...")
        archivo_excel = descomprimir_zip_expoyer(archivo_zip)
        
        if archivo_excel:
            print(f"‚úÖ Archivo Excel extra√≠do: {archivo_excel.name}")
            return archivo_excel
        else:
            raise Exception("No se pudo extraer el archivo Excel del ZIP")
        
    except Exception as e:
        print(f"‚ùå Error en descarga de Expoyer: {e}")
        return None

def descomprimir_zip_expoyer(archivo_zip):
    """Descomprimir el archivo ZIP de Expoyer y extraer el Excel"""
    import zipfile
    
    try:
        print(f"üì¶ Descomprimiendo: {archivo_zip.name}")
        
        # Crear carpeta temporal para extraer
        carpeta_temp = archivo_zip.parent / f"temp_{archivo_zip.stem}"
        carpeta_temp.mkdir(exist_ok=True)
        
        # Descomprimir el ZIP
        with zipfile.ZipFile(archivo_zip, 'r') as zip_ref:
            zip_ref.extractall(carpeta_temp)
            archivos_extraidos = zip_ref.namelist()
            print(f"üìÑ Archivos extra√≠dos: {archivos_extraidos}")
        
        # Buscar archivos Excel en la carpeta extra√≠da
        archivos_excel = list(carpeta_temp.glob("*.xlsx")) + list(carpeta_temp.glob("*.xls"))
        
        if not archivos_excel:
            # Buscar en subcarpetas
            archivos_excel = list(carpeta_temp.rglob("*.xlsx")) + list(carpeta_temp.rglob("*.xls"))
        
        if not archivos_excel:
            print("‚ùå No se encontraron archivos Excel en el ZIP")
            return None
        
        # Tomar el primer archivo Excel encontrado
        archivo_excel_temp = archivos_excel[0]
        print(f"üìÑ Archivo Excel encontrado: {archivo_excel_temp.name}")
        
        # Mover el archivo Excel a la carpeta de descargas con nombre apropiado
        fecha = datetime.now().strftime("%Y-%m-%d")
        nombre_final = f"Expoyer_{fecha}.xlsx"
        
        # Evitar sobrescribir archivos existentes
        contador = 1
        archivo_final = CARPETA_DESCARGAS / nombre_final
        while archivo_final.exists():
            nombre_final = f"Expoyer_{fecha}_{contador}.xlsx"
            archivo_final = CARPETA_DESCARGAS / nombre_final
            contador += 1
        
        # Mover el archivo
        archivo_excel_temp.rename(archivo_final)
        print(f"‚úÖ Archivo Excel guardado como: {archivo_final.name}")
        
        # Limpiar archivos temporales
        try:
            # Eliminar el ZIP original
            archivo_zip.unlink()
            print(f"üóëÔ∏è ZIP original eliminado: {archivo_zip.name}")
            
            # Eliminar carpeta temporal
            import shutil
            shutil.rmtree(carpeta_temp)
            print(f"üóëÔ∏è Carpeta temporal eliminada")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al limpiar archivos temporales: {e}")
        
        return archivo_final
        
    except Exception as e:
        print(f"‚ùå Error al descomprimir ZIP: {e}")
        return None

def hacer_login_normal(driver, proveedor, wait):
    """Manejar el login normal para otros proveedores"""
    print("üîß Procesando login normal...")
    
    # Buscar campo de usuario
    usuario_field = None
    selectores_usuario = ["#username", "input[name='username']", "input[type='text']", "[formcontrolname='username']"]
    
    for selector in selectores_usuario:
        try:
            usuario_field = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
            break
        except:
            continue
    
    if not usuario_field:
        raise Exception("No se pudo encontrar el campo de usuario")
    
    # Login
    usuario_field.clear()
    time.sleep(0.5)
    usuario_field.send_keys(proveedor["usuario"])
    time.sleep(1)
    
    password_field = driver.find_element(By.CSS_SELECTOR, "input[formcontrolname='password'], input[type='password'], input[name='password']")
    password_field.clear()
    time.sleep(0.5)
    password_field.send_keys(proveedor["contrasena"])
    time.sleep(1)
    
    submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], input[type='submit']")
    submit_button.click()

def intentar_descarga_archivo_principal(driver, proveedor_nombre):
    """Intentar descarga del archivo principal - UN SOLO INTENTO"""
    try:
        print(f"\nüîò Descargando archivo de {proveedor_nombre}")
        
        # Para Fusion, usar la funci√≥n espec√≠fica de descarga m√∫ltiple
        if proveedor_nombre.lower() == 'fusion':
            wait = WebDriverWait(driver, 30)
            archivos_descargados = descargar_archivos_fusion(driver, wait)
            
            if archivos_descargados:
                print(f"üéâ ¬°{len(archivos_descargados)} archivo(s) descargado(s) exitosamente!")
                for archivo in archivos_descargados:
                    print(f"   üìÑ {archivo}")
                return True, f"{len(archivos_descargados)} archivos"
            else:
                print(f"‚ö†Ô∏è No se descargaron archivos")
                return False, None
        
        # Para Expoyer, usar la funci√≥n espec√≠fica de descarga
        elif proveedor_nombre.lower() == 'expoyer':
            wait = WebDriverWait(driver, 30)
            archivo_descargado = descargar_archivo_expoyer(driver, wait)
            
            if archivo_descargado:
                print(f"üéâ ¬°Archivo descargado y descomprimido exitosamente!")
                print(f"   üìÑ {archivo_descargado.name}")
                return True, archivo_descargado.name
            else:
                print(f"‚ö†Ô∏è No se pudo descargar el archivo")
                return False, None
        
        # Para otros proveedores, usar la l√≥gica original
        # Buscar el bot√≥n/enlace de Excel (adaptado para cada proveedor)
        boton_principal = buscar_primer_boton_excel(driver, proveedor_nombre)
        
        if not boton_principal:
            raise Exception("No se encontr√≥ el bot√≥n/enlace de descarga")
        
        # Hacer scroll al bot√≥n/enlace
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", boton_principal)
        time.sleep(2)
        
        # Obtener archivos antes de este clic espec√≠fico
        archivos_antes_clic = obtener_archivos_actuales()
        
        # Hacer clic
        driver.execute_script("arguments[0].click();", boton_principal)
        print(f"‚úÖ Clic realizado en bot√≥n/enlace de descarga")
        
        # Esperar descarga (3 minutos)
        archivo_descargado = esperar_nueva_descarga(archivos_antes_clic, timeout_minutos=3)
        
        if archivo_descargado:
            # Renombrar archivo
            archivo_final = renombrar_archivo_descargado(archivo_descargado, proveedor_nombre)
            print(f"üéâ ¬°Archivo descargado exitosamente!")
            return True, archivo_final.name
        else:
            print(f"‚ö†Ô∏è No se descarg√≥ el archivo")
            
            # Verificar si hay archivos nuevos sin renombrar
            archivos_actuales = obtener_archivos_actuales()
            archivos_nuevos = archivos_actuales - archivos_antes_clic
            
            if archivos_nuevos:
                print(f"üìÑ Hay {len(archivos_nuevos)} archivo(s) nuevo(s) sin procesar")
                for archivo_nuevo in archivos_nuevos:
                    if archivo_nuevo.stat().st_size > 1024:
                        print(f"üìÑ Procesando archivo encontrado: {archivo_nuevo.name}")
                        archivo_final = renombrar_archivo_descargado(archivo_nuevo, proveedor_nombre)
                        print(f"üéâ ¬°Archivo recuperado!")
                        return True, archivo_final.name
            
            return False, None
        
    except Exception as e:
        print(f"‚ùå Error en descarga: {e}")
        return False, None

def procesar_proveedor_con_reintentos(proveedor, max_intentos=2):
    """Procesar un proveedor con reintentos en caso de error"""
    for intento in range(max_intentos):
        driver = None
        try:
            print(f"‚ñ∂ Procesando proveedor: {proveedor['nombre']} (Intento {intento + 1})")
            
            # Crear driver
            chrome_options = crear_driver_con_opciones()
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            
            driver.set_page_load_timeout(120)
            driver.implicitly_wait(20)
            
            # Configurar script para evitar detecci√≥n
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            wait = WebDriverWait(driver, 30)
            
            # Login
            print(f"Navegando a: {proveedor['login_url']}")
            driver.get(proveedor["login_url"])
            time.sleep(5)
            
            # Determinar tipo de login seg√∫n el proveedor
            if proveedor['nombre'].lower() == 'fusion':
                hacer_login_fusion(driver, proveedor, wait)
            elif proveedor['nombre'].lower() == 'ventor':
                hacer_login_ventor(driver, proveedor, wait)
            elif proveedor['nombre'].lower() == 'icepar':
                hacer_login_icepar(driver, proveedor, wait)
            elif proveedor['nombre'].lower() == 'atonor':
                hacer_login_atonor(driver, proveedor, wait)
            elif proveedor['nombre'].lower() == 'sinkromat':
                hacer_login_sinkromat(driver, proveedor, wait)
            elif proveedor['nombre'].lower() == 'expoyer':
                hacer_login_expoyer(driver, proveedor, wait)
            else:
                hacer_login_normal(driver, proveedor, wait)
            
            # Verificar login y manejar p√°gina de productos para Fusion
            try:
                wait.until(EC.url_contains("/dashboard"))
                print("‚úÖ Login exitoso")
            except:
                time.sleep(5)
                # Para Fusion, verificar si estamos en la p√°gina de productos
                if proveedor['nombre'].lower() == 'fusion':
                    if manejar_pagina_productos_fusion(driver, wait):
                        print("‚úÖ Login de Fusion exitoso - p√°gina de productos manejada")
                    elif "login" not in driver.current_url.lower():
                        print("‚úÖ Login de Fusion exitoso (verificaci√≥n alternativa)")
                    else:
                        raise Exception("Login fall√≥")
                # Para otros proveedores especiales, verificar si ya no estamos en la p√°gina de login
                elif proveedor['nombre'].lower() in ['ventor', 'icepar', 'atonor', 'sinkromat', 'expoyer']:
                    if "login" not in driver.current_url.lower():
                        print(f"‚úÖ Login de {proveedor['nombre']} exitoso (verificaci√≥n alternativa)")
                    else:
                        raise Exception("Login fall√≥")
                else:
                    if "/dashboard" not in driver.current_url and "login" in driver.current_url:
                        raise Exception("Login fall√≥")
            
            # Ir a p√°gina de descarga
            print(f"Navegando a p√°gina de descarga: {proveedor['pagina_descarga']}")
            driver.get(proveedor["pagina_descarga"])
            time.sleep(10)
            
            # Obtener archivos actuales antes de intentar descargas
            archivos_iniciales = obtener_archivos_actuales()
            print(f"üìÅ Archivos iniciales en carpeta: {len(archivos_iniciales)}")
            
            # L√ìGICA PRINCIPAL: Un solo intento de descarga
            print(f"\nüéØ ESTRATEGIA: Un solo intento de descarga por proveedor")
            
            # Intentar descarga del archivo principal
            exitoso, nombre_archivo = intentar_descarga_archivo_principal(driver, proveedor['nombre'])
            
            # Resumen de descargas para este proveedor
            print(f"\nüìä Resumen para {proveedor['nombre']}:")
            if exitoso:
                print(f"   ‚úÖ Archivo(s) descargado(s) exitosamente")
                print(f"   üìÑ Archivo(s): {nombre_archivo}")
                return True
            else:
                print(f"   ‚ùå No se pudo descargar el archivo")
                raise Exception(f"Descarga fall√≥")
                
        except Exception as e:
            print(f"‚ùå Error en intento {intento + 1} con {proveedor['nombre']}: {e}")
            
            if intento < max_intentos - 1:
                print(f"Reintentando en 15 segundos...")
                time.sleep(15)
            else:
                print(f"‚ùå Fall√≥ despu√©s de {max_intentos} intentos")
                return False
        finally:
            if driver:
                driver.quit()
            time.sleep(5)
    
    return False

# Cargar proveedores desde el archivo
try:
    with open(RUTA_JSON, "r", encoding="utf-8") as f:
        proveedores = json.load(f)
except FileNotFoundError:
    print(f"‚ùå No se encontr√≥ el archivo {RUTA_JSON}")
    exit(1)

# Procesar cada proveedor
exitosos = 0
fallidos = 0

print(f"üìÅ Carpeta de descargas: {CARPETA_DESCARGAS}")
print(f"üìÖ Fecha: {fecha}")
print(f"üî¢ Total de proveedores: {len(proveedores)}")
print(f"‚è∞ Timeout por intento: 3 minutos")
print(f"üîÑ Intentos por proveedor: 1 (un solo intento)")
print(f"üéØ Estrategia: Un intento por proveedor")
print(f"üîß Especial: Fusion (anuncio + 2 archivos), Ventor (modal), Icepar (#email/#password), Atonor (name=log/pwd), Sinkromat (Chakra UI), Expoyer (dropdown + ZIP)")

for i, proveedor in enumerate(proveedores):
    print(f"\n{'='*80}")
    print(f"Procesando {i+1}/{len(proveedores)}: {proveedor['nombre']}")
    print(f"{'='*80}")
    
    if procesar_proveedor_con_reintentos(proveedor):
        exitosos += 1
    else:
        fallidos += 1
    
    # Pausa entre proveedores
    if i < len(proveedores) - 1:
        tiempo_espera = random.uniform(20, 40)
        print(f"‚è≥ Esperando {tiempo_espera:.1f} segundos antes del siguiente proveedor...")
        time.sleep(tiempo_espera)

print(f"\n{'='*80}")
print(f"üìä RESUMEN FINAL:")
print(f"‚úÖ Proveedores exitosos: {exitosos}")
print(f"‚ùå Proveedores fallidos: {fallidos}")
print(f"üìÅ Archivos guardados en: {CARPETA_DESCARGAS}")
print(f"{'='*80}")

# Mostrar archivos descargados hoy
archivos_hoy = list(CARPETA_DESCARGAS.glob(f"*_{fecha}*.xlsx")) + list(CARPETA_DESCARGAS.glob(f"*_{fecha}*.xls"))
if archivos_hoy:
    print(f"\nüìã Archivos descargados hoy:")
    for archivo in archivos_hoy:
        tama√±o = archivo.stat().st_size / 1024
        print(f"   üìÑ {archivo.name} ({tama√±o:.1f} KB)")

    print(f"\nüìà Total: {len(archivos_hoy)} archivo(s)")